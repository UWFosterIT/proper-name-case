{"version":3,"sources":["../src/index.js"],"names":["convert","str","chunks","buffer","isFirstChunk","x","length","match","push","processChunk","final","join","trim","toLowerCase","toUpperCase","toUpperCaseAt","pos","substr","charAt"],"mappings":";;;;;AAAA;kBACe;AACbA,WAAS,UAAUC,GAAV,EAAe;AACtB,QAAIA,QAAQ,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAA/B,IAA8CA,QAAQ,EAA1D,EAA8D;AAC5D,UAAIC,SAAS,EAAb;AACA,UAAIC,SAAS,EAAb;AACA,UAAIC,eAAe,IAAnB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,IAAIK,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,YAAIJ,IAAII,CAAJ,EAAOE,KAAP,CAAa,OAAb,KAAyBN,IAAII,CAAJ,KAAU,GAAnC,IAA0CJ,IAAII,CAAJ,KAAU,GAApD,IAA2DJ,IAAII,CAAJ,KAAU,GAAzE,EAA8E;AAC5EH,iBAAOM,IAAP,CAAY,KAAKC,YAAL,CAAmB,GAAEN,MAAO,GAAEF,IAAII,CAAJ,CAAO,EAArC,EAAwCD,YAAxC,CAAZ;AACAA,yBAAe,KAAf;AACAD,mBAAS,EAAT;AACD,SAJD,MAIO;AACLA,oBAAUF,IAAII,CAAJ,CAAV;AACD;AACF;;AAED,UAAIF,UAAU,EAAd,EAAkB;AAChBD,eAAOM,IAAP,CAAY,KAAKC,YAAL,CAAkBN,MAAlB,EAA0BC,YAA1B,CAAZ;AACAA,uBAAe,KAAf;AACD;;AAED,UAAIM,QAAQR,OAAOS,IAAP,CAAY,EAAZ,EAAgBC,IAAhB,EAAZ;AACA,aAAOF,KAAP;AACD;AACD,WAAO,EAAP;AAED,GA1BY;;AA4BbD,gBAAc,UAAUR,GAAV,EAAeG,YAAf,EAA6B;AACzC;AACA,QAAIH,IAAIM,KAAJ,CAAU,+CAAV,KAA8DH,iBAAiB,KAAnF,EAA0F;AACxF,aAAOH,IAAIY,WAAJ,EAAP;AACD;;AAED;AACA,QAAIZ,IAAIM,KAAJ,CAAU,mCAAV,CAAJ,EAAoD;AAClD,aAAON,IAAIa,WAAJ,EAAP;AACD;AACDb,UAAMA,IAAIY,WAAJ,EAAN;AACAZ,UAAM,KAAKc,aAAL,CAAmBd,GAAnB,EAAwB,CAAxB,CAAN;;AAEA;AACA,QAAIA,IAAIM,KAAJ,CAAU,6CAAV,CAAJ,EAA8D;AAC5DN,YAAM,KAAKc,aAAL,CAAmBd,GAAnB,EAAwB,CAAxB,CAAN;AACD;;AAED;AACA,QAAIA,IAAIM,KAAJ,CAAU,8HAAV,CAAJ,EAA+I;AAC7IN,YAAM,KAAKc,aAAL,CAAmBd,GAAnB,EAAwB,CAAxB,CAAN;AACD;AACD,WAAOA,GAAP;AACD,GAnDY;;AAqDbc,iBAAe,UAAUd,GAAV,EAAee,GAAf,EAAoB;AACjC,WAAOf,IAAIgB,MAAJ,CAAW,CAAX,EAAcD,GAAd,IAAqBf,IAAIiB,MAAJ,CAAWF,GAAX,EAAgBF,WAAhB,EAArB,GAAqDb,IAAIgB,MAAJ,CAAWD,MAAM,CAAjB,CAA5D;AACD;;AAvDY,C","file":"index.js","sourcesContent":["/* eslint-disable no-useless-escape */\nexport default {\n  convert: function (str) {\n    if (str !== null && typeof str !== 'undefined' && str !== '') {\n      let chunks = [];\n      let buffer = '';\n      let isFirstChunk = true;\n      for (let x = 0; x < str.length; x++) {\n        if (str[x].match(/[\\s]+/) || str[x] == '-' || str[x] == '.' || str[x] == ',') {\n          chunks.push(this.processChunk(`${buffer}${str[x]}`, isFirstChunk));\n          isFirstChunk = false;\n          buffer = '';\n        } else {\n          buffer += str[x];\n        }\n      }\n\n      if (buffer != '') {\n        chunks.push(this.processChunk(buffer, isFirstChunk));\n        isFirstChunk = false;\n      }\n\n      let final = chunks.join('').trim();\n      return final;\n    }\n    return '';\n\n  },\n\n  processChunk: function (str, isFirstChunk) {\n    // Surname prefixes\n    if (str.match(/^(van|von|der|la|d[aeio]|d[ao]s|dit)[\\s]+.*$/i) && isFirstChunk === false) {\n      return str.toLowerCase();\n    }\n\n    // Ordinal suffixes (I - VIII only)\n    if (str.match(/^(i{3}|i{1,2}v?|v?i{1,2})[\\s,]*$/i)) {\n      return str.toUpperCase();\n    }\n    str = str.toLowerCase();\n    str = this.toUpperCaseAt(str, 0);\n\n    // Third character capitalized, like D'Angelo, McDonald, St. John, 0'Neil\n    if (str.match(/(^|\\s)+(Mc|[DO]\\'|St\\.|St[\\.]?[\\s]|Dewolf)/i)) {\n      str = this.toUpperCaseAt(str, 2);\n    }\n\n    // Fourth character capitalized, like MacDonald, MacRae\n    if (str.match(/(^|\\s*)(Mac)(allist|arth|b|c(allu|art|ask|l|r|ull)|d|f|g|i(nn|nty|saa|v)|kinn|kn|l(a|ea|eo)|m|na[mu]|n[ei]|ph|q|ra|sw|ta|w)/i)) {\n      str = this.toUpperCaseAt(str, 3);\n    }\n    return str;\n  },\n\n  toUpperCaseAt: function (str, pos) {\n    return str.substr(0, pos) + str.charAt(pos).toUpperCase() + str.substr(pos + 1);\n  }\n\n};\n"]}